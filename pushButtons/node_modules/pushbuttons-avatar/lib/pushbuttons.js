const fs = require('fs-extra');
const path = require('path');
const klawSync = require('klaw-sync');
const _ = require('underscore');

var CreateWidgetButton = function CreateWidgetButton () {
  if (!(this instanceof CreateWidgetButton)) {
		return new CreateWidgetButton();
	}

  this.CreateWidgetButton = CreateWidgetButton;
}


CreateWidgetButton.prototype.init = function (CY, folder, config) {
  this.pluginPath = folder;
  this.CY = CY;
  this.Config = config;
  this.defaultImage = path.normalize (folder + '/assets/html/images/defaultButton.png');
}


function addPushButtonGraph(params) {

  return new Promise((resolve, reject) => {
    params.cyto.getGraph()
    .then(cy => params.cyto.addGraphElement(cy, params.id, params.layout, params.parent))
		.then(elem => params.cyto.addElementStyle(elem, params, params.parent))
		.then(elem => {
      return new Promise((resolve, reject) => {
        if (!params.label.textHidden) {
          params.cyto.addElementLabel(elem, params.label)
          .then(elem => resolve(elem))
        } else {
          resolve(elem);
        }
      })
    })
		.then(elem => params.cyto.addElementName(elem, params.name))
    .then(elem => params.cyto.addElementClass(elem, params.class))
    .then(elem => params.cyto.addElementImage(elem, params.image))
		.then(elem => params.cyto.addElementSize(elem, params.size))
    .then(elem => params.cyto.addElementPosition(elem, params.pos))
    .then(elem => params.cyto.grabbableElement(elem, params.parent ? false : true))
		.then(elem => resolve(elem))
    .catch(err => reject(err))
  })
}


CreateWidgetButton.prototype.create = function (cyto, params) {
  return new Promise((resolve, reject) => {
    let image;
    if (params.style.click_values && params.style.click_values['background-image-On']) {
       if (params.style.click_values['background-image-Off']) {
         image = params.style.click_values['background-image-Off'];
       } else {
         image = params.style.click_values['background-image-On'];
      }
    } else if (params.style.dblclick_values && params.style.dblclick_values['background-image']) {
        image = params.style.dblclick_values['background-image'];
    }
    if (!image) {
        image = this.defaultImage;
    }
    image = image.replace("url('","").replace("')","");
    addPushButtonGraph({
                  id: params.id,
                  cyto: cyto,
                  layout: "pushButtons",
                  name:  params.id+'_node',
                  style: {
                    'border-color': params.style["border-color"] ?  params.style["border-color"] : "#999",
                    'border-width': params.style["border-width"] ? params.style["border-width"] : "0px",
                    'border-opacity': params.style["border-opacity"] ? params.style["border-opacity"] : 1,
                    'padding': "0px"
                  },
                  label: {
                    textHidden: params.style["text-hidden"],
                    text: params.title,
                    style: {
                      "font-size": params.style["font-size"] ? params.style["font-size"] : "14px",
                      "text-valign": params.style["text-valign"] ? params.style["text-valign"] : "bottom",
                      "text-margin-y": params.style["text-margin-y"] ? params.style["text-margin-y"] : "3px",
                      "text-outline-width": params.style["text-outline-width"] ? params.style["text-outline-width"] : "3px",
                      "text-outline-color": params.style["text-outline-color"] ? params.style["text-outline-color"] : "#999",
                      "color": params.style["color"] ? params.style["color"] : "white"
                    }
                  },
                  class: params.class,
                  image: image,
                  size: {
                    width: params.style.width,
                    height: params.style.height
                  },
                  pos: {
                    x: params.pos.x,
                    y: params.pos.y
                  }
    })
    .then(elem => {
      return new Promise((resolve, reject) => {
        elem.data('type', params.type);
        elem.data('click_values', params.click_values);
        elem.data('dblclick_values', params.dblclick_values);
        elem.data('style', params.style);
        resolve(elem);
      })
    })
    .then(elem => resolve(elem))
    .catch(err => {
      reject(err);
    })
  });
}


CreateWidgetButton.prototype.load = function (cyto, id) {

  return new Promise((resolve, reject) => {
    let folder = path.normalize (this.pluginPath+'/assets/buttons/'+id+'.json');
    let widgetJson = fs.readJsonSync (folder, { throws: false });
    if (widgetJson && widgetJson.id) {
          this.create(cyto, {
                    id: widgetJson.id,
                    class: "pushButtonsWidget",
                    title: widgetJson.title,
                    click_values: widgetJson.click_values,
                    dblclick_values: widgetJson.dblclick_values,
                    customized: widgetJson.style.color ? true : false,
                    style: widgetJson.style,
                    pos: widgetJson.position,
                    type: widgetJson.class
          })
          .then(elem => {
              resolve (elem);
          })
          .catch (err => {
            console.log('err', err);
            reject ();
          })
    } else {
      reject ();
    }
  })
}


CreateWidgetButton.prototype.loadAll = function (cyto) {

  return new Promise((resolve, reject) => {
    let folder = path.normalize (this.pluginPath+'/assets/buttons');
    let widget_col = this.CY.collection();
    if (fs.existsSync(folder)) {
      let widgets = klawSync(path.normalize (folder), {nodir: true, depthLimit: 1});
      widgets = _.reject(widgets, function(num) {
        let pushButtonJson = fs.readJsonSync (num.path, { throws: false });
        return !pushButtonJson;
      })
      let nb = 0;
      for (let i=0; i < widgets.length; i++) {
        let widgetJson = fs.readJsonSync (widgets[i].path, { throws: false });
        if (widgetJson && widgetJson.id && !widgetJson.ignored) {
          this.create(cyto, {
                    id: widgetJson.id,
                    class: "pushButtonsWidget",
                    title: widgetJson.title,
                    click_values: widgetJson.click_values,
                    dblclick_values: widgetJson.dblclick_values,
                    customized: widgetJson.style.color ? true : false,
                    style: widgetJson.style,
                    pos: widgetJson.position,
                    type: widgetJson.class
          })
          .then(elem => {
            widget_col = widget_col.union(elem);
            if ((nb+1) == widgets.length) {
              resolve (widget_col);
            } else
              nb = nb+1;
          })
          .catch (err => {
            console.log('err', err);
            resolve ();
          })
        } else {
          if ((nb+1) == widgets.length) {
            resolve (widget_col);
          } else
            nb = nb+1;
        }
      }
      if (widgets.length == 0) resolve (widget_col);
    } else {
      resolve (widget_col);
    }
  })
}


/**  Export Graph */
module.exports.CreateWidgetButton = CreateWidgetButton;
